# -*- coding: utf-8 -*-
"""AirProbe Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jXcBV7skU3bkqv48xM_RxoESPdfyWo46
"""

from PIL import Image # Importing pillow library
from PIL.ExifTags import TAGS # Tags to convert tagid to tagname
import glob # To get the images from folder

# Global dictionary that stores the metadata of corresponding image
imageMeta_dict = {}

# Iterating through all images in the current folder
for filename in glob.glob('*.jpg'): #assuming jpg

    # Dictionary to store metadata of particular images 
    #with corresponding tagname and value
    metadata_dict = {}
    # Opening the file
    image = Image.open(filename)
    # Extracting the exif metadata
    exifdata = image.getexif()
    # Looping through all the tags present in exifdata
    for tagid in exifdata:
          
        # Getting the tag name instead of tag id
        tagname = TAGS.get(tagid, tagid)
    
        # Passing the tagid to get its respective value
        value = exifdata.get(tagid)

        # Store the value in the local dictionary
        metadata_dict[tagname] = value
    
    
    # Conditional statement to check if metadata is not null
    if metadata_dict:
      # Formating the GPS information into GPS coordinates in the metadata
      # Likewise metadata filtering can be done
      if 'GPSInfo' in metadata_dict:
          geo_coordinate = '{0} {1} {2:.2f} {3}, {4} {5} {6:.2f} {7}'.format(
          metadata_dict['GPSInfo'][2][0][0],
          metadata_dict['GPSInfo'][2][1][0],
          metadata_dict['GPSInfo'][2][2][0] / metadata_dict['GPSInfo'][2][2][1],
          metadata_dict['GPSInfo'][1],
          metadata_dict['GPSInfo'][4][0][0],
          metadata_dict['GPSInfo'][4][1][0],
          metadata_dict['GPSInfo'][4][2][0] / metadata_dict['GPSInfo'][4][2][1],
          metadata_dict['GPSInfo'][3]
      )
      # GPS coordinates are updated in the dictionary
      metadata_dict['GPSInfo'] = geo_coordinate
      # This dictionary will act as nested dict in global dictionary
      imageMeta_dict[filename] = metadata_dict
    else:
      print("The image doesn't have metadata!")

from PIL import Image # Pillow library for imag processing
import re # Regular expression
import cv2  # Importing OpenCv
import imutils # Module to rotate images
import os # To access and change files 
import openpyxl # Importing openpyxl library to work with excel sheets
from openpyxl import load_workbook
from openpyxl import Workbook 
from openpyxl.styles import Alignment
from openpyxl.cell.cell import ILLEGAL_CHARACTERS_RE

# Workbook is the object that we want to create using openpyxl library.
workbook = Workbook()

# The workbook object is then used to add new worksheet 
worksheet = workbook.active  
 
# Use the worksheet object to write
# Data which represents the header categories
worksheet['A1'] = 'Imagename'
worksheet['B1'] = 'ResizedImage'
worksheet['C1'] = 'RotatedImage'
worksheet['D1'] = 'MetadataInfo'

# Loop to set the header row alignment
for i in range(1,5):
  worksheet.cell(1,i).alignment = Alignment(horizontal='center')

# Loop to set the Width of the column based on ratio of pixels and excel units
for i in {'A','B','C','D'}:
  worksheet.column_dimensions[i].width = 73

# Start from the first cell where data is to be written
row = 1
col = 1
 
# Iterate over the data and write it out row by row.
for key in imageMeta_dict.keys():

    # Extarcting row number from imagename by spliting the name
    absname , row , end = re.split('_|.jpg',key)
    # Converting string to integer
    row = int(row)
    # Populating first column with imagenames
    worksheet.cell(row, col).value = key
    # Read an image as input using OpenCV
    image = cv2.imread(key)
    # Resizing image using OpenCv to 512 X 512 as specified
    img = cv2.resize(image, (512, 512))
    # OverWriting the previous image with resized image
    cv2.imwrite(key,img)
    # Image is reopened using openpyxl library
    temp = openpyxl.drawing.image.Image(key)
    # Resized Image is inserted in 2nd Column
    worksheet.add_image(temp , 'B' + str(row))  
    # Image is rotated 270 degrees anticlockwise using imutils library
    Rotated_image = imutils.rotate(img, angle=270)
    # Saving the rotated image With 'R' as prefix to its original name
    cv2.imwrite('R'+key,Rotated_image)
    # Rotated Image is reopened using openpyxl library
    temp =  openpyxl.drawing.image.Image('R'+key)
    # Rotated Image is inserted in 3rd Column
    worksheet.add_image(temp , 'C' + str(row))
    # Setting the Height of the Row based on pixels of the image
    worksheet.row_dimensions[row].height = 384

    # Loop to set the Alignment of the roe to center
    for i in range(1,5):
      worksheet.cell(row,i).alignment = Alignment(vertical='center')
      
    # Metadata string
    result = ''

    # Loop to iterate through all the fields of image's metadata
    for nkey in imageMeta_dict[key].keys():
      # Dictionary is deserialized into readable string
      result = result + str(nkey) + ' : ' + str(imageMeta_dict[key][nkey]) +'\n'
    # Cell is populated with string of metadata
    worksheet.cell(row, col+3).value = ILLEGAL_CHARACTERS_RE.sub(r'',result)
    # Allowing cell to have multiline text
    worksheet.cell(row, col+3).alignment = Alignment(wrapText=True)
    
 
# Finally, close the Excel file by saving it using save() method.
workbook.save('Task2.xlsx')
# Loop to remove Rotated images which were saved with a prefix
for key in imageMeta_dict.keys():
  os.remove('R'+key)

